(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{419:function(t,e,a){"use strict";a.r(e);var n=a(43),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"对象的原型是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的原型是什么？"}},[t._v("#")]),t._v(" 对象的原型是什么？")]),t._v(" "),a("p",[t._v("Object是引用类型，包括：Object 、Array 、Function 、Data等。\n"),a("strong",[t._v("JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。")])]),t._v(" "),a("p",[t._v("当我们用obj.xxx访问一个对象的属性时，JavaScript引擎先在当前（this）对象上查找该属性，如果没有找到，就到其原型对象上找(数组是Array.prototype,function是function。prototype)，如果还没有找到，就一直上溯到Object.prototype对象，最后，如果还没有找到，就只能返回undefined。")]),t._v(" "),a("p",[t._v("比如创建了一个Array对象：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var arr = [1,2,3]\n")])])]),a("p",[t._v("其原型链是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("arr ----\x3e Array.prototype ----\x3e Object.prototype ----\x3e null\n")])])]),a("p",[t._v("Array.prototype定义了indexOf()、shift()等方法，因此你可以在所有的Array对象上直接调用这些方法。甚至你都可以在Array.prototype自定义方法，但是没有必要最后不要这样做。")]),t._v(" "),a("p",[t._v("当我们创建一个函数时：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function foo(){\n  return 0;\n}\n")])])]),a("p",[t._v("函数也是一个对象 ，他的原型链是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("foo ----\x3e Function.prototype ----\x3e Object.prototype ----\x3e null\n")])])]),a("p",[t._v("由于Function.prototype定义了apply()等方法，因此，所有函数都可以调用apply()方法。")]),t._v(" "),a("h3",{attrs:{id:"用构造函数创建对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用构造函数创建对象"}},[t._v("#")]),t._v(" 用构造函数创建对象")]),t._v(" "),a("p",[t._v("用函数来创建对象比直接用var = {...}创建对象要方面的多，它就是构造函数。\n构造函数的首字母都应该大写\n首先先创建一个构造函数：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Student(name) {\n    this.name = name;\n    this.hello = function () {\n        alert('Hello, ' + this.name + '!');\n    }\n}\n")])])]),a("p",[t._v("可以用关键字new来调用这个函数，并返回一个对象：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var xiaoming = new Student('小明');\nxiaoming.name; // '小明'\nxiaoming.hello(); // Hello, 小明!\n")])])]),a("p",[t._v("注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。")]),t._v(" "),a("p",[t._v("新创建的xiaoming的原型链是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("xiaoming ----\x3e Student.prototype ----\x3e Object.prototype ----\x3e null\n\n")])])]),a("p",[t._v("也就是说，xiaoming的原型指向函数Student的原型。如果你又创建了xiaohong、xiaojun，那么这些对象的原型与xiaoming是一样的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("xiaoming ↘\nxiaohong -→ Student.prototype ----\x3e Object.prototype ----\x3e null\nxiaojun  ↗\n")])])]),a("p",[t._v("用new Student()创建的对象还从原型上获得了一个constructor属性，它指向函数Student本身：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log(xiaoming.constructor === Student)//true\n")])])]),a("p",[t._v("我们可以用instanceof来检测对象类型；")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log(xiaohong instanceof Object);//true\nconsole.log(xiaohong instanceof Student);//true\nconsole.log(xiaoming instanceof Object);//true\nconsole.log(xiaoming instanceof Student);//true\n")])])]),a("p",[t._v("这个例子中所创建的对象即是Object的实例 也是Student的实例，因为所有的对象都继承自Object")]),t._v(" "),a("p",[t._v("参考：js高程第六章\n参考："),a("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997235247b53be560ab041a7b10360a567422a78000",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰的博客"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);