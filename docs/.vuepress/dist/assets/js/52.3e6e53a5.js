(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{361:function(n,t,e){"use strict";e.r(t);var a=e(43),i=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h3",{attrs:{id:"php做的验证码二"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#php做的验证码二"}},[n._v("#")]),n._v(" php做的验证码二")]),n._v(" "),e("h4",{attrs:{id:"把验证码添加到登录页面中，"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把验证码添加到登录页面中，"}},[n._v("#")]),n._v(" 把验证码添加到登录页面中，")]),n._v(" "),e("p",[n._v("因为学了ajax，所以我直接用ajax做的登录验证码的刷新")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<!doctype html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport"\n          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <title>登录验证</title>\n</head>\n<body>\n<form action="action.php" method="post">\n    用户名：<input name="username" id="username"><br>\n    密&nbsp;码：<input name="password" id="password"><br>\n    <img id="ImgSrc" src="VerificationCode.php" alt="">\n    <a href="javascript:void(0);" onclick="getCode()">看不清</a>\n    <br>\n    验证码：<input name="code" id="code" onkeyup="checkCode()">\n    <br>\n    <div id="codeSpan"></div>\n    <br>\n    <button type="button" onclick="checkForm()">提交</button>\n</form>\n\n<script>\n\n    //验证用户密码\n    function checkForm() {\n        //判断用户名密码是否为空 判断是否符合验证\n        var username=document.querySelector("#username");\n        var password=document.querySelector("#password");\n        var form=document.querySelector("form");\n        if(username.value!==""&&password.value!==""){\n            form.submit();\n            return true;\n        }else {\n            alert("用户名为空");\n            return false\n        }\n    }\n    //切换验证码\n    function getCode() {\n        imgSrc=document.getElementById("ImgSrc");\n        imgSrc.src="VerificationCode.php";\n        var codeSpan=document.getElementById("codeSpan");\n        var code=document.getElementById("code");\n        code.value=\'\';\n        codeSpan.innerHTML=\'\';\n    }\n    //验证验证码\n    function checkCode() {\n        var code=document.querySelector("#code");\n        var xmlhttp;\n        if (window.XMLHttpRequest){\n            xmlhttp=new XMLHttpRequest();\n        }else{\n            xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");\n        }\n        xmlhttp.onreadystatechange=function () {\n            if (xmlhttp.readyState==4&&xmlhttp.status==200){\n                var codeSpan=document.querySelector("#codeSpan");\n                    codeSpan.innerHTML = xmlhttp.responseText;\n            }\n        };\n        xmlhttp.open("POST","action.php",true);\n        // xmlhttp.setRequestHeader("Content-type","appliction/x-www-form-urlencoded");\n        xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");\n        xmlhttp.send("code="+code.value);\n    }\n<\/script>\n</body>\n</html>\n')])])]),e("p",[n._v("最后输出的是：\n"),e("img",{attrs:{src:"http://p0bnwspy9.bkt.clouddn.com/phpGD3.png",alt:""}}),n._v("\n输出后如图：\n"),e("img",{attrs:{src:"http://p0bnwspy9.bkt.clouddn.com/phpGD4.png",alt:""}})]),n._v(" "),e("h4",{attrs:{id:"封装验证码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装验证码"}},[n._v("#")]),n._v(" 封装验证码")]),n._v(" "),e("p",[n._v("把自己的写的一个验证码封装起来，下次方便重复的利用，也顺便复习一下面向对象的思维")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("header(\"Content-Type: text/html;charset=utf-8\");\nclass VerificarionCode{\n    public $width;\n    public $height;\n    public $image;\n    function __construct($widths,$heights)\n    {\n        //新建画布\n        $this->image=imagecreatetruecolor($widths,$heights);\n    }\n    function imageColor($widths,$heights,$red,$green,$blue){\n        //新建矩形白色\n        $color=imagecolorallocate($this->image,$red,$green,$blue);\n        //填充一下\n        imagefilledrectangle($this->image,0,0,$widths,$heights,$color);\n    }\n\n    function getRandColor($image){\n    //随机颜色\n        return imagecolorallocate($image,mt_rand(0,255),mt_rand(0,255),mt_rand(0,255));\n    }\n\n    function str($widths,$heights,$lengths){\n        //快速创建字符串 $string='asadf132' array_merge 合并成一个数组 join字符串链接数组中的值  赋给string\n        $string=join('',array_merge(range(0,9),range('a','z'),range('A','Z')));\n    //echo $string;\n    //得到字体宽度\n        $textWidth=imagefontwidth(28);\n        //得到字体高度\n        $textHeight=imagefontheight(28);\n        $length=$lengths;\n        $strZ='';\n        for($i=0;$i<$length;$i++){\n            //随机每一位颜色\n        //    $randColor=imagecolorallocate($image,mt_rand(0,255),mt_rand(0,255),mt_rand(0,255));\n            $randColor=imagecolorallocate($this->image,mt_rand(0,255),mt_rand(0,255),mt_rand(0,255));\n            $size=mt_rand(19,22);\n            $angle=mt_rand(-15,15);\n        //    $x=20+40*$i;\n        //    $y=30;\n            $x=($widths/$length)*$i+$textWidth;\n            $y=mt_rand($heights/2,$heights-$textHeight);\n            $fontFile='font/FZLTCXHJW.TTF';\n            //打乱string这个字符串 然后随机取第一个字符串[0]\n            $text=str_shuffle($string)[0];\n            $strZ=$strZ.$text;\n            imagettftext($this->image,$size,$angle,$x,$y,$randColor,$fontFile,$text);\n        }\n    }\n    function Etpixel($widths,$heights,$EtpNum){\n        //添加点，像素做干扰元素\n        for($i=1;$i<=$EtpNum;$i++){\n            //绘制像素\n            $randColor=imagecolorallocate($this->image,mt_rand(0,255),mt_rand(0,255),mt_rand(0,255));\n            imagesetpixel($this->image,mt_rand(0,$widths),mt_rand(0,$heights),$randColor);\n        }\n    }\n    function line($widths,$heights,$LineNum){\n        //添加线段干扰\n        for($i=1;$i<=$LineNum;$i++){\n            //绘制线段\n            imageline($this->image,mt_rand(0,$widths),mt_rand(0,$heights),mt_rand(0,$widths),mt_rand(0,$heights), $randColor=imagecolorallocate($this->image,mt_rand(0,255),mt_rand(0,255),mt_rand(0,255)));\n//                     起始位置          结束位置\n        }\n    }\n    function imagepng(){\n        //告诉浏览器以图像形式显示png\n        header('content-type:image/png');\n        //输出图像\n        imagepng($this->image);\n        //销毁资源\n        imagedestroy($this->image);\n    }\n}\n$demo1 =new VerificarionCode(180,60);\n//画布\n$demo1->imageColor(180,60,255,255,255);\n//图像的数字\n$demo1->str(180,60,4);\n//干扰点\n$demo1->Etpixel(180,60,60);\n//干扰线段\n$demo1->line(180,60,3);\n//png输出\n$demo1->imagepng();\n\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);