(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{391:function(e,t,n){"use strict";n.r(t);var s=n(43),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("blockquote",[n("p",[e._v("我们可以使用Node设定一个目录，然后让Web程序变成一个文件服务器。要实现这一点，我们只需要解析request.url中的路径，然后在本地找到对应的文件，把文件内容发送出去就可以了。")])]),e._v(" "),n("p",[e._v("解析URL需要用到Node.js提供的url模块，它使用起来非常简单，通过parse()将一个字符串解析为一个Url对象：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var url= require('url');\nconsole.log(url.parse('http://user:pass@host.com:8080/path/to/file?query=string#hash'));\n\n")])])]),n("p",[e._v("解析之后是：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    Url {\n        protocol: 'http:',\n        slashes: true,\n        auth: 'user:pass',\n        host: 'host.com:8080',\n        port: '8080',\n        hostname: 'host.com',\n        hash: '#hash',\n        search: '?query=string',\n        query: 'query=string',\n        pathname: '/path/to/file',\n        path: '/path/to/file?query=string',\n        href:\n         'http://user:pass@host.com:8080/path/to/file?query=string#hash' \n        }\n")])])]),n("p",[e._v("处理本地文件目录需要使用Node.js提供的path模块，它可以方便地构造目录：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var path = require('path');\n\n// 解析当前目录:\nconsole.log(path(__dirname));\n//__dirname 表示当前所在目录  '/Users'\n\n// 组合完整的文件路径:当前目录+'pub'+'index.html':\nvar filePath = path.join(__dirname, 'fileServer', 'index.html');\n// '/Users/fileServer/index.html'\n")])])]),n("p",[e._v("使用path模块可以正确处理操作系统相关的文件路径。在Windows系统下，返回的路径类似于"),n("code",[e._v("C:\\Users\\fileServer\\index.html")]),e._v("，这样，我们就不关心怎么拼接路径了。")]),e._v(" "),n("p",[e._v("最后，我们实现一个文件服务器file_server.js：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var \n    http= require('http'),\n    fs= require('fs'),\n    url= require('url'),\n    path= require('path');\n    \n// 从命令行参数获取root目录，默认是当前目录:\nvar root= path.join(__dirname, 'static', 'index.html');\n\n//创建服务器\nvar server= http.createServer(function(request, response){\n    //获得ur的path 类似'/css/index.css'\n    var pathName= url.parse(request.url).pathname;\n    //获得对应的本地文件路径 类似’static/css/index.css‘\n    var filePath= path.join(root);\n    //获取文件状态\n    console.log(filePath);\n    fs.stat(filePath, function (err, stats) {\n        if (!err && stats.isFile()) {\n            // 没有出错并且文件存在:\n            console.log('200 ' + request.url);\n            // 发送200响应:\n            response.writeHead(200);\n            // 将文件流导向response:\n            fs.createReadStream(filePath).pipe(response);\n        } else {\n            // 出错了或者文件不存在:\n            console.log('404 ' + request.url);\n            // 发送404响应:\n            response.writeHead(404);\n            response.end('404 Not Found');\n        }\n    });\n});\nserver.listen(8080);\nconsole.log('Server is running at http://127.0.0.1:8080/');\n")])])]),n("p",[e._v("当你的html文件是这样的时候：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<head>\n    <meta charset="UTF-8">\n    <title>Road</title>\n    <link rel="stylesheet" href="css/index.css">\n</head>\n<body>\n    <img src="/images/bg.jpeg" alt="11">\n    <h1>书山有路勤为径,学海无涯苦做舟。</h1>\n    <script src="js/index.js"><\/script>\n</body>\n')])])]),n("p",[e._v("然后请求"),n("code",[e._v("http://127.0.0.1:8080/index.html")]),e._v("就会打印出：\n"),n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/7072486-5c918eec1e59e4ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"101544689152_.pic.jpg"}})]),e._v(" "),n("p",[e._v("当然他只能发起请求，想要请求到并且正确返回还需要设置文件的ContentType属性。\n我们可以使用"),n("code",[e._v("path.extname")]),e._v("获取请求文件的后缀：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let extname = path.extname('css/index.css');\n// .css\n")])])]),n("p",[e._v("我们获取到后缀之后就可以根据后缀来设置它的ContentType，这里需要用到一个mime.json文件，然后使用一个函数去匹配:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//mime 读取mime.json 里面存储了常见的文件的ContentType 为请求的对应的文件设置对应的 ContentType 属性\nfunction getContentType(extName, callBack){\n                //      文件后缀   回调函数\n    //读取mime.json\n    fs.readFile('./mime.json', (err, data)=>{\n        if(err){\n        //读取失败 抛出错误\n            throw err;\n            return;\n        }\n        // 读取成功\n        let mimeJson = JSON.parse(data);\n        //转码 将json字符串转化成对象\n        let contentType = mimeJson[extName] || 'text/plain';\n        //取出对应json中 对应的 请求的后缀的相匹配的 ContentType 属性\n        callBack(contentType);\n        //执行这个回调函数 并传参contentType\n    })\n}\n")])])]),n("p",[e._v("搭建静态服务器的步骤应该是：")]),e._v(" "),n("ol",[n("li",[e._v("先拿到请求文件的后缀名(extname)")]),e._v(" "),n("li",[e._v("引入mime.json 文件并读取->转码")]),e._v(" "),n("li",[e._v("匹配和后缀对应的ContentType")]),e._v(" "),n("li",[e._v("使用回调函数 所有请求的文件 都会拿到后缀 然后自动匹配相应的ContentType")]),e._v(" "),n("li",[e._v("执行getContentType函数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("            getContentType(extname, (contentType)=>{\n                res.writeHead(200, {\"Content-Type\": contentType + ';charset=UTF-8'})\n                res.end(data)\n            })\n")])])]),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/kuangshp128/article/details/75207984",target:"_blank",rel:"noopener noreferrer"}},[e._v("常见文件的mime类型"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://github.com/AnsonZnl/StudyNodeJS/blob/master/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AF%BE%E6%97%B666-%E8%AF%BE%E6%97%B671%E7%AC%94%E8%AE%B0.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub-Node 学习笔记"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://www.cnblogs.com/xxchi/p/6382892.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考-Node path模块相关方法"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);