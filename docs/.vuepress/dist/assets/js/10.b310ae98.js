(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{417:function(v,_,p){"use strict";p.r(_);var t=p(43),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,p=v._self._c||_;return p("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[p("p",[p("strong",[v._v("1、基本数据类型和引用数据类型")])]),v._v(" "),p("p",[v._v("ECMAScript包括两个不同类型的值：基本数据类型和引用数据类型。")]),v._v(" "),p("p",[v._v("基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。")]),v._v(" "),p("p",[v._v("当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。")]),v._v(" "),p("p",[p("strong",[v._v("2、常见的基本数据类型：")])]),v._v(" "),p("p",[v._v("Number、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例：")]),v._v(" "),p("p",[v._v("var a = 10;")]),v._v(" "),p("p",[v._v("var b = a;")]),v._v(" "),p("p",[v._v("b = 20;")]),v._v(" "),p("p",[v._v("console.log(a); // 10值")]),v._v(" "),p("p",[v._v("上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值。")]),v._v(" "),p("p",[p("strong",[v._v("b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。")])]),v._v(" "),p("p",[v._v("下图演示了这种基本数据类型赋值的过程：")]),v._v(" "),p("p",[p("strong",[v._v("3、引用类型数据：")])]),v._v(" "),p("p",[p("strong",[v._v("也就是对象类型Object type，比如：Object 、Array 、Function 、Data等。")])]),v._v(" "),p("p",[v._v("javascript的引用数据类型是保存在堆内存中的对象。")]),v._v(" "),p("p",[v._v("与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。")]),v._v(" "),p("p",[v._v("所以，引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。")]),v._v(" "),p("p",[v._v("var obj1 = new Object();")]),v._v(" "),p("p",[v._v("var obj2 = obj1;")]),v._v(" "),p("p",[v._v('obj2.name = "我有名字了";')]),v._v(" "),p("p",[v._v("console.log(obj1.name); // 我有名字了")]),v._v(" "),p("p",[v._v("说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，")]),v._v(" "),p("p",[v._v("但是实际上他们共同指向了同一个堆内存对象。"),p("strong",[v._v("实际上改变的是堆内存对象。")])]),v._v(" "),p("p",[v._v("下面我们来演示这个引用数据类型赋值过程：")]),v._v(" "),p("p",[v._v("[图片上传失败...(image-3d74f7-1531992451590)]")]),v._v(" "),p("p",[p("strong",[v._v("4、总结区别")])]),v._v(" "),p("p",[v._v("**　　a 声明变量时不同的内存分配：　**")]),v._v(" "),p("p",[v._v("1）原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在"),p("strong",[v._v("变量访问的位置")]),v._v("。")]),v._v(" "),p("p",[v._v("这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。")]),v._v(" "),p("p",[v._v("2）引用值：存储在堆（heap）中的对象，也就是说，"),p("strong",[v._v("存储在变量处的值是一个指针（point），指向存储对象的内存地址。")])]),v._v(" "),p("p",[v._v("这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。")]),v._v(" "),p("p",[v._v("地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。")]),v._v(" "),p("p",[p("strong",[v._v("b")]),v._v(" "),p("strong",[v._v("不同的内存分配机制也带来了不同的访问机制")])]),v._v(" "),p("p",[v._v("1）在javascript中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，")]),v._v(" "),p("p",[v._v("首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的"),p("strong",[v._v("按引用访问")]),v._v("。")]),v._v(" "),p("p",[v._v("2）而原始类型的值则是可以直接访问到的。")]),v._v(" "),p("p",[v._v("**　　c 复制变量时的不同**")]),v._v(" "),p("p",[v._v("1）原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，"),p("strong",[v._v("此后这两个变量是完全独立的，他们只是拥有相同的value而已。")])]),v._v(" "),p("p",[v._v("2）引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，")]),v._v(" "),p("p",[v._v("也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。")]),v._v(" "),p("p",[v._v("（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）。"),p("strong",[v._v("多了一个指针")])]),v._v(" "),p("p",[p("strong",[v._v("d 参数传递的不同（"),p("strong",[v._v("把实参复制给形参的过程")]),v._v("）")])]),v._v(" "),p("p",[v._v("首先我们应该明确一点：ECMAScript中所有函数的参数都"),p("strong",[v._v("是按值来传递")]),v._v("的。")]),v._v(" "),p("p",[v._v("但是为什么涉及到原始类型与引用类型的值时仍然有区别呢？还不就是因为内存分配时的差别。")]),v._v(" "),p("p",[v._v("1）原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。")]),v._v(" "),p("p",[v._v("2）引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！")]),v._v(" "),p("p",[v._v("因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。")]),v._v(" "),p("p",[v._v("参考：https://www.cnblogs.com/cxying93/p/6106469.html")])])}),[],!1,null,null,null);_.default=o.exports}}]);