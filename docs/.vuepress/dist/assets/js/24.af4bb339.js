(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{406:function(t,e,a){"use strict";a.r(e);var o=a(43),_=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("一直以来对于JavaScript 的原型链的概念，始终有些东西有一种模糊感，最近刚好有时间就塌下心认真的把《JavaScript高级程序设计》中相关内容认真读了一遍，也查看了很多网上很多资料，以前很多不明白的地方也渐渐明白了起来。"),a("br"),t._v("\n写一篇文章记录一下最近学习的感悟。")]),t._v(" "),a("h3",{attrs:{id:"字面量创建对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量创建对象"}},[t._v("#")]),t._v(" 字面量创建对象")]),t._v(" "),a("p",[t._v("我们通常创建一个对象无非就两种方式：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 1. var obj= new Object();//new 一个Object的实例\n 2. var obj= {};//对象字面量\n")])])]),a("p",[t._v("使用对象字面量 和使用new的方式是一样的。\n为了简便，一般推荐使用使用字面量："),a("code",[t._v("var o= {};")])]),t._v(" "),a("h3",{attrs:{id:"构造函数创建对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数创建对象"}},[t._v("#")]),t._v(" 构造函数创建对象")]),t._v(" "),a("p",[t._v("当我们想要创建自定义的对象时，需要用到构造函数。\n构造函数和普通函数有两个区别："),a("br"),t._v("\n1. 便于和普通函数区分，函数名首字母大写。"),a("br"),t._v("\n2. 使用 "),a("code",[t._v("new")]),t._v(" 操作符调用，返回一个实例对象。")]),t._v(" "),a("p",[t._v("除此之外和普通函数一摸一样。\n我们使用构造函数"),a("code",[t._v("Person")]),t._v("来创建两个实例对象：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Person(name){\n    this.name = name;\n    this.sayName= function (){ alert(this.name) }\n }\nvar person1 = new Person('小明');\nvar person2 = new Person('小红');\nconsole.log(person1);//{name: \"小明\", sayName: fun}\nconsole.log(person2);//{name: \"小红\", sayName: fun}\n")])])]),a("p",[t._v("上面的例子不难理解，虽然这两个实例对象都有"),a("code",[t._v("sayName")]),t._v("方法，而且他们两个的作用也是一样的，但却是两个方法，只是名字和作用一样。")]),t._v(" "),a("p",[t._v("画个图表示一下：\n"),a("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/7072486-e6a1cb2af9592327?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"131547802804_.pic.jpg"}})]),t._v(" "),a("p",[t._v("如果还不明白，我在打个比喻："),a("br"),t._v("\n就像A街上有一间麦当劳，在B街上也开了一间麦当劳，它们都叫麦当劳，作用也是一样的。但是你总不能说他们是一间麦当劳吧？")]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("person1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sayName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" person2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sayName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("p",[t._v("如果这样的话，我们每构造出来一个对象，都要单独为这个对象创建出一个专属于它自己使用的"),a("code",[t._v("sayName")]),t._v("，这是很占用内存的。")]),t._v(" "),a("p",[t._v("那我们能不能让所有的实例对象都共同使用一个"),a("code",[t._v("sayName")]),t._v("方法，来节省内存，提升效率呢？这需要我们先理解原型对象的概念。")]),t._v(" "),a("h3",{attrs:{id:"原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型对象"}},[t._v("#")]),t._v(" 原型对象")]),t._v(" "),a("p",[t._v("我们先了解原型对象的概念。")]),t._v(" "),a("blockquote",[a("p",[t._v("每个对象都有原型对象（null除外），我们用"),a("code",[t._v("__proto__")]),t._v("表示，每个函数都有"),a("code",[t._v("prototype")]),t._v("属性，指向实例的原型对象。")])]),t._v(" "),a("p",[t._v("对照这句话，按照我们上面的例子，也就是说"),a("code",[t._v("Person.prototype")]),t._v("指向"),a("code",[t._v("person1")]),t._v("的原型对象("),a("code",[t._v("__proto__")]),t._v("),")]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" person1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("为了便于理解，来看一张图。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/7072486-f2e5ab0014367d09?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"71547797523_.pic.jpg"}})]),t._v(" "),a("p",[t._v("恩~他们的关系大概就是这样。")]),t._v(" "),a("h3",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),a("p",[t._v("原型链简单用一句话概括就是：")]),t._v(" "),a("blockquote",[a("p",[t._v("原型链就是 对象的"),a("code",[t._v("__proto__")]),t._v("所连接的链状结构")])]),t._v(" "),a("p",[t._v("为了方便我们理解原型链，举一个简单的例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function F(){\n    this.a = 1;\n    this.b = 2;\n}\nF.prototype.b = 3;\nF.prototype.c = 4;\nvar o = new F();// {a: 1, b: 2}\n//原型链：\n//o --\x3e o.__proto__ --\x3e o.__proto__.__proto__ --\x3e null\n// 其中的 --\x3e 就表示 __proto__ 也就是原型链\nconsole.log(o.a); // 1\n// o上有a这个属性吗？有的，该属性的值为1\n\nconsole.log(o.b); // 2\n// o上有b这个属性吗？有的，该属性的值为2\n// 原型上也有一个'b'属性,但是它不会被访问到.这种情况称为\"属性遮蔽 \"\n\nconsole.log(o.c); // 4\n// o上有c这个属性吗？没有，那看看原型上有没有\n// o.__proto__上有c这个属性吗？有的，该属性的值为4\n\nconsole.log(o.d); // undefined\n// o上有d这个属性吗？没有,那看看原型上有没有\n// o.__proto__ 上有d这个属性吗？没有，那看看它的原型上有没有\n// o.__proto__.__proto__ 为 null，停止搜索\n// 没有找到d属性，返回undefined。\n")])])]),a("p",[t._v("我们画张图来表示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/7072486-95ee1c64fb5b51e0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"91547800262_.pic_hd.jpg"}})]),t._v(" "),a("p",[t._v("图中这条红色的线就是原型链。\n由此可见，"),a("strong",[t._v("实例对象可访问自己原型对象上的属性和方法")]),t._v("，额..准确来说是:")]),t._v(" "),a("ol",[a("li",[t._v("当一个对象 查找属性或方法时，自己有，停止查找，返回结果。")]),t._v(" "),a("li",[t._v("自己没有，顺着"),a("code",[t._v("__proto__")]),t._v("一直向上查找，如找到，停止查找，返回结果。")]),t._v(" "),a("li",[t._v("如果一直找到了原型链的最顶端(null)，还没有找到，返回"),a("code",[t._v("undefined")]),t._v("。")])]),t._v(" "),a("p",[t._v("我们先回顾一下那个"),a("code",[t._v("sayName")]),t._v("的问题：\n"),a("strong",[t._v("怎么让所有的实例对象都是用一个"),a("code",[t._v("sayName")]),t._v("方法呢")]),t._v("。"),a("br"),t._v("\n现在我们可以使用原型对象来解决这个问题了。"),a("br"),t._v("\n我们把"),a("code",[t._v("sayName")]),t._v("方法放到实例的原型对象上面，也就是"),a("code",[t._v("Person.prototype")]),t._v("上面来供所有实例使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Person(name){\n    this.name = name;\n }\nPerson.prototype.sayName=function (){\n    alert(this.name);\n}\nvar person1 = new Person('小明');\nvar person2 = new Person('小红');\nperson1.sayName === person2.sayName;//true\n")])])]),a("p",[t._v("用图表示：\n"),a("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/7072486-f4d5c032a9b2b20f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"101547801223_.pic.jpg"}})]),t._v(" "),a("h3",{attrs:{id:"补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),a("p",[a("strong",[t._v("constructor")]),a("br"),t._v("\n说一下我的经历，一开始理解原型链时，一直在"),a("code",[t._v("prototype")]),t._v("、"),a("code",[t._v("__proto__")]),t._v("、"),a("code",[t._v("constructor")]),t._v("在这个三个属性中绕来绕去。")]),t._v(" "),a("p",[t._v("为了便于理解，我把"),a("code",[t._v("constructor")]),t._v("放在最后了。"),a("br"),t._v(" "),a("code",[t._v("constructor")]),t._v("字面意思就很容易理解，构造函数的意思。\n一句话解释:")]),t._v(" "),a("blockquote",[a("p",[t._v("每个原型对象都有一个 constructor 属性指向 关联的构造函数。")])]),t._v(" "),a("p",[t._v("还是上面那个例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log(Person.prototype.constructor);//Person(){ fun }\n")])])]),a("p",[t._v("需要注意的一点是，实例对象上没有"),a("code",[t._v("constructor")]),t._v("属性。\n但是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log(person1.constructor) ;//Person(){ fun }\n")])])]),a("p",[t._v("得出这个结果很简单:\n实例上查找不到"),a("code",[t._v("constructor")]),t._v("属性 --\x3e 顺着"),a("code",[t._v("__proto__")]),t._v("在原型对象上找 --\x3e 找到并返回。")]),t._v(" "),a("p",[a("strong",[t._v("Object.prototype")]),a("br"),t._v("\n刚才我们说了创建对象的两种方式：字面量创建对象和使用"),a("code",[t._v("new")]),t._v("操作符创建对象。"),a("br"),t._v("\n这两种方式创建出来的对象都会继承"),a("code",[t._v("Object.prototyoe")]),t._v("上的方法。\n比如，我们使用字面量新创建一个对象"),a("code",[t._v("o")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var o = {value: 1};\no.toString();//"[object Object]"\n//查找过程： o --\x3e o.__proto__ 找到返回\no.__proto__ === Object.prototype;//true\n')])])]),a("p",[a("code",[t._v("o")]),t._v("这个的对象本身并没有"),a("code",[t._v("toString")]),t._v("这个方法，但它却可以使用"),a("code",[t._v("toString")]),t._v("方法。"),a("br"),t._v("\n因为它继承了"),a("code",[t._v("Object.prototyoe")]),t._v("上的"),a("code",[t._v("toString")]),t._v("的方法。")]),t._v(" "),a("p",[a("strong",[t._v("null")]),a("br"),t._v("\n既然对象都会继承自"),a("code",[t._v("Object.prototype")]),t._v("上面的方法，那它自己的原型又是什么呢。答案是"),a("code",[t._v("null")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Object.prototype.__prototype__ === null;//true\n")])])]),a("p",[t._v("以上仅自己学习所得，如有不当之处 望指出。")])])}),[],!1,null,null,null);e.default=_.exports}}]);