(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{370:function(e,a,t){"use strict";t.r(a);var n=t(43),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"为什么使用webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用webpack"}},[e._v("#")]),e._v(" 为什么使用webpack??")]),e._v(" "),t("p",[t("strong",[e._v("一句话 webpack能够提高了我们的开发效率")]),e._v("\n什么是Webpack\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。")]),e._v(" "),t("h3",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("p",[e._v("新建一个空的练习文件夹 如：webpackText")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n//npm install --save-dev webpack@版本号\n//可下载对应版本的webpack\n")])])]),t("h3",{attrs:{id:"正式使用webpack前的准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正式使用webpack前的准备"}},[e._v("#")]),e._v(" 正式使用Webpack前的准备")]),e._v(" "),t("ol",[t("li",[e._v("创建package.json文件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm init\n")])])]),t("p",[e._v("项目名称和作者等信息回车即可\n2. package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 安装Webpack\nnpm install --save-dev webpack\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个index.html文件）创建三个文件:")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("index.html")]),e._v(" --放在public文件夹中;")]),e._v(" "),t("li",[t("code",[e._v("Greeter.js")]),e._v("-- 放在app文件夹中;")]),e._v(" "),t("li",[t("code",[e._v("main.js")]),e._v("-- 放在app文件夹中;")])]),e._v(" "),t("p",[e._v("此时项目结构如下图所示\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/7072486-c977d7d00f7a1ec4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"项目结构"}})]),e._v(" "),t("p",[e._v("我们在"),t("strong",[e._v("index.html")]),e._v("文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为"),t("code",[e._v("bundle.js")]),e._v("，之后我们还会详细讲述）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\x3c!-- index.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id=\'root\'>\n    </div>\n    <script src="bundle.js"><\/script>\n  </body>\n</html>\n')])])]),t("p",[e._v("我们在Greeter.js中定义一个返回包含问候信息的html元素的函数,并依据CommonJS规范导出这个函数为一个模块：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n")])])]),t("p",[e._v("main.js文件中我们写入下述代码，用以把Greeter模块返回的节点插入页面。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//main.js \nconst greeter = require('./Greeter.js');\ndocument.querySelector(\"#root\").appendChild(greeter());\n")])])]),t("p",[e._v("根目录下新建webpack.config.js，")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('module.exports = {\n  entry:  __dirname + "/app/main.js",//已多次提及的唯一入口文件\n  output: {//__dirname 是node.js中的一个全局变量，它指向当前执行脚本所在的目录。\n    path: __dirname + "/public",//打包后的文件存放的地方\n    filename: "bundle.js"//打包后输出文件的文件名\n  }\n}\n')])])]),t("p",[e._v("为了更方面的打包，在package.json中对scripts对象进行相关设置即可，设置方法如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "name": "webpack-sample-project",\n  "version": "1.0.0",\n  "description": "Sample webpack project",\n  "scripts": {\n    "start": "webpack" // 修改的是这里，JSON文件不支持注释，引用时请清除\n  },\n  "author": "zhang",\n  "license": "ISC",\n  "devDependencies": {\n    "webpack": "3.10.0"\n  }\n}\n')])])]),t("p",[e._v("命令行中输入"),t("code",[e._v("npm start")]),e._v("试试\n然后浏览器打开public/index.html\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/7072486-6493c12b502af61f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"WechatIMG2.jpeg"}})]),e._v(" "),t("h3",{attrs:{id:"使用webpack构建本地服务器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用webpack构建本地服务器"}},[e._v("#")]),e._v(" 使用webpack构建本地服务器")]),e._v(" "),t("ol",[t("li",[e._v("安装devserver")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install --save-dev webpack-dev-server\n")])])]),t("p",[e._v("注意：webpack3.x的请下载webpack-dev-server2.9，不然会报错\n2. 把这些命令加到webpack的配置文件中，现在的配置文件webpack.config.js如下所示")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('module.exports = {\n  devtool: \'eval-source-map\',\n\n  entry:  __dirname + "/app/main.js",\n  output: {\n    path: __dirname + "/public",\n    filename: "bundle.js"\n  },\n\n  devServer: {\n    contentBase: "./public",//本地服务器所加载的页面所在的目录\n    historyApiFallback: true,//不跳转\n    inline: true//实时刷新\n  } \n}\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("在package.json中的scripts对象中添加如下命令，用以开启本地服务器：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "start": "webpack",\n    "server": "webpack-dev-server --open"\n  },\n')])])]),t("p",[e._v("在终端中输入npm run server即可在本地的8080端口查看结果（实时刷新）\n"),t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/7072486-cb7c29cb6d2e9dff.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"WechatIMG3.jpeg"}})]),e._v(" "),t("h2",{attrs:{id:"loaders"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loaders"}},[e._v("#")]),e._v(" Loaders")]),e._v(" "),t("p",[e._v("鼎鼎大名的Loaders登场了！\nLoaders是webpack提供的最激动人心的功能之一了。通过使用不同的loader，webpack有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的\n"),t("strong",[e._v("Loaders可以把React的中用到的JSX文件转换为JS文件")]),e._v("\nLoaders需要单独安装并且需要在webpack.config.js中的modules关键字下进行配置，Loaders的配置包括以下几方面：")]),e._v(" "),t("ul",[t("li",[e._v("test：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）")]),e._v(" "),t("li",[e._v("loader：loader的名称（必须）")]),e._v(" "),t("li",[e._v("include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；")]),e._v(" "),t("li",[e._v("query：为loaders提供额外的设置选项（可选）")])]),e._v(" "),t("h3",{attrs:{id:"babel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel"}},[e._v("#")]),e._v(" Babel")]),e._v(" "),t("p",[e._v("Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：")]),e._v(" "),t("p",[e._v("让你能使用最新的JavaScript代码（ES6，ES7...），而不用管新标准是否被当前使用的浏览器完全支持；\n让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；\nBabel的安装与配置\nBabel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-env-preset包和解析JSX的babel-preset-react包）。")]),e._v(" "),t("p",[e._v("一次性安装这些依赖包")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react\n")])])]),t("p",[e._v('Babel其实可以完全在 webpack.config.js 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 ".babelrc" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('module.exports = {\n    entry: __dirname + "/app/main.js",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + "/public",//打包后的文件存放的地方\n        filename: "bundle.js"//打包后输出文件的文件名\n    },\n    devtool: \'eval-source-map\',\n    devServer: {\n        contentBase: "./public",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: "babel-loader"\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n};\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//.babelrc\n{\n  "presets": ["react", "env"]\n}\n')])])]),t("p",[e._v("因为webpack4都出来了 我学的这篇是webpack3.5版本的，但是基础的东西都还是一样的，最后放上这个webpack的配置文件，如果每一项都懂的话，入门应该是没问题了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 一个常见的`webpack`配置文件\nconst webpack = require(\'webpack\');\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\nconst ExtractTextPlugin = require(\'extract-text-webpack-plugin\');\n\nmodule.exports = {\n      entry: __dirname + "/app/main.js", //已多次提及的唯一入口文件\n      output: {\n          path: __dirname + "/build",\n          filename: "bundle-[hash].js"\n      },\n      devtool: \'none\',\n      devServer: {\n          contentBase: "./public", //本地服务器所加载的页面所在的目录\n          historyApiFallback: true, //不跳转\n          inline: true,\n          hot: true\n      },\n      module: {\n          rules: [{\n                  test: /(\\.jsx|\\.js)$/,\n                  use: {\n                      loader: "babel-loader"\n                  },\n                  exclude: /node_modules/\n              }, {\n                  test: /\\.css$/,\n                  use: ExtractTextPlugin.extract({\n                      fallback: "style-loader",\n                      use: [{\n                          loader: "css-loader",\n                          options: {\n                              modules: true,\n                              localIdentName: \'[name]__[local]--[hash:base64:5]\'\n                          }\n                      }, {\n                          loader: "postcss-loader"\n                      }],\n                  })\n              }\n          }\n      ]\n  },\n  plugins: [\n      new webpack.BannerPlugin(\'版权所有，翻版必究\'),\n      new HtmlWebpackPlugin({\n          template: __dirname + "/app/index.tmpl.html" //new 一个这个插件的实例，并传入相关的参数\n      }),\n      new webpack.optimize.OccurrenceOrderPlugin(),\n      new webpack.optimize.UglifyJsPlugin(),\n      new ExtractTextPlugin("style.css")\n  ]\n};\n')])])]),t("p",[e._v("参考：https://www.jianshu.com/p/42e11515c10f\nwebpack中文网：https://www.webpackjs.com/concepts/\n简要理解CommonJS规范：https://blog.csdn.net/u012443286/article/details/78825917\nwebpack4那点东西：https://juejin.im/post/5abef5e96fb9a028e33b9035")])])}),[],!1,null,null,null);a.default=s.exports}}]);